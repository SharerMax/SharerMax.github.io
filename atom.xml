<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>西瓜的小站</title>
  
  <subtitle>Android小菜鸟一枚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://saeratom.com/"/>
  <updated>2018-10-15T09:40:04.563Z</updated>
  <id>http://saeratom.com/</id>
  
  <author>
    <name>Saeratom</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android面试</title>
    <link href="http://saeratom.com/2018/09/17/Android%E9%9D%A2%E8%AF%95/"/>
    <id>http://saeratom.com/2018/09/17/Android面试/</id>
    <published>2018-09-17T07:03:41.000Z</published>
    <updated>2018-10-15T09:40:04.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-HashMap-与-HashTable-的区别"><a href="#1-HashMap-与-HashTable-的区别" class="headerlink" title="1. HashMap 与 HashTable 的区别"></a>1. HashMap 与 HashTable 的区别</h2><p>HashMap 和 HashTable 都实现了Map接口，</p><h4 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h4><p>HashMap是线程不安全的，并且可以接受 <em>null</em> 做为键值或 value 值, HashTable是线程安全的，但是不能接受 <em>null</em> 值</p><h4 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h4><p>HashMap因为非 synchronized，所以在单线程模式下性能会优于HashTable</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>HashMap使用的迭代器 fail-fast 迭代器 <em>Iterator</em>，而 HashTable 使用的是非 fail-fast 的迭代器 <em>Enumerator</em> </p><blockquote><ol><li><a href="http://www.importnew.com/7010.html" target="_blank" rel="noopener">HashMap 和 Hashtable 的区别</a></li><li><a href="http://zhaox.github.io/2016/07/05/hashmap-vs-hashtable" target="_blank" rel="noopener">HashMap 和 HashTable 到底哪不同？</a></li></ol></blockquote><a id="more"></a><h2 id="2-RecycleView-局部刷新"><a href="#2-RecycleView-局部刷新" class="headerlink" title="2. RecycleView 局部刷新"></a>2. RecycleView 局部刷新</h2><p>如果有可能尽量不直接调用 <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter#notifydatasetchanged" target="_blank" rel="noopener">notifyDataSetChanged</a>，尽可能使用和数据变化对应的方法来通知 Adapter 数据发生了变化。如：</p><blockquote><ol><li><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#notifyItemChanged(int)" target="_blank" rel="noopener">notifyItemChanged(int)</a></li><li><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#notifyItemInserted(int)" target="_blank" rel="noopener">notifyItemInserted(int)</a></li><li><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#notifyItemRemoved(int)" target="_blank" rel="noopener">notifyItemRemoved(int)</a></li><li><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#notifyItemRangeChanged(int,%20int)" target="_blank" rel="noopener">notifyItemRangeChanged(int, int)</a></li><li><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#notifyItemRangeInserted(int,%20int)" target="_blank" rel="noopener">notifyItemRangeInserted(int, int)</a></li><li><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#notifyItemRangeRemoved(int,%20int)" target="_blank" rel="noopener">notifyItemRangeRemoved(int, int)</a></li></ol></blockquote><h2 id="3-Object-的-wait-方法"><a href="#3-Object-的-wait-方法" class="headerlink" title="3. Object 的 wait() 方法"></a>3. Object 的 wait() 方法</h2><p><em>wait()</em> 方法需要写在同步块（<em>synchronized</em>）中，并与<em>notify()</em> 或 <em>notifyAll()</em> 搭配使用。</p><p><em>wait()</em>、 <em>notify()</em> 和 <em>notifyAll()</em> 都是object的方法，当一个对象调用 <em>wait()</em> 当前线程会进入WAITING状态进入等待池并释放当前持有的锁。当对象的 <em>notify()</em> 或 <em>notifyAll</em> 方法被调用，等待状态的线程会进入锁池重新争取锁，一旦获得锁，便进入可RUNNABLE状态，等待执行。</p><h4 id="notify-和-notifyAll-的区别"><a href="#notify-和-notifyAll-的区别" class="headerlink" title="notify() 和 notifyAll()的区别"></a>notify() 和 notifyAll()的区别</h4><p>首先要明确一点，等待池中的线程是不参与锁的竞争的，也就无法直接执行；锁池中的线程要先或的锁才能进入RUNNABLE状态，随之执行</p><p><em>notify()</em> 随机唤醒等待池中的一个线程进入锁池<br><em>notifyAll()</em> 唤醒等待池中的所有线程进入锁池</p><blockquote><p><a href="https://www.zhihu.com/question/37601861/answer/145545371" target="_blank" rel="noopener">java中的notify和notifyAll有什么区别</a></p></blockquote><h2 id="4-动态代理"><a href="#4-动态代理" class="headerlink" title="4. 动态代理"></a>4. 动态代理</h2><p>代理模式的定义：代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。</p><p>代理模式的一种实现，与静态代理相比更适合大量需要代理处理的场景，可实现所谓的AOP思想的编程方式</p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>被代理对象必须为接口，或接口的实现类</li><li>代理对象必须实现InvocationHandler接口</li><li>Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)生成代理对象</li><li>使用生成的代理对象替换被代理对象</li></ol><p><a href="https://www.zhihu.com/question/264948554/answer/287647598" target="_blank" rel="noopener">动态代理为什么传接口，内部实现接口，而不直接传类，直接继承类?</a></p><div class="tip"><br>依一个接口的输入与数据的参数规则去动态的对这个接口进行实现，这种形式是 java 动态代理最常用的一种场景。所以第二个参数实际是对于这个实现的规则的表述，就是一个接口。<br></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-HashMap-与-HashTable-的区别&quot;&gt;&lt;a href=&quot;#1-HashMap-与-HashTable-的区别&quot; class=&quot;headerlink&quot; title=&quot;1. HashMap 与 HashTable 的区别&quot;&gt;&lt;/a&gt;1. HashMap 与 HashTable 的区别&lt;/h2&gt;&lt;p&gt;HashMap 和 HashTable 都实现了Map接口，&lt;/p&gt;
&lt;h4 id=&quot;线程安全性&quot;&gt;&lt;a href=&quot;#线程安全性&quot; class=&quot;headerlink&quot; title=&quot;线程安全性&quot;&gt;&lt;/a&gt;线程安全性&lt;/h4&gt;&lt;p&gt;HashMap是线程不安全的，并且可以接受 &lt;em&gt;null&lt;/em&gt; 做为键值或 value 值, HashTable是线程安全的，但是不能接受 &lt;em&gt;null&lt;/em&gt; 值&lt;/p&gt;
&lt;h4 id=&quot;速度&quot;&gt;&lt;a href=&quot;#速度&quot; class=&quot;headerlink&quot; title=&quot;速度&quot;&gt;&lt;/a&gt;速度&lt;/h4&gt;&lt;p&gt;HashMap因为非 synchronized，所以在单线程模式下性能会优于HashTable&lt;/p&gt;
&lt;h4 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h4&gt;&lt;p&gt;HashMap使用的迭代器 fail-fast 迭代器 &lt;em&gt;Iterator&lt;/em&gt;，而 HashTable 使用的是非 fail-fast 的迭代器 &lt;em&gt;Enumerator&lt;/em&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.importnew.com/7010.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HashMap 和 Hashtable 的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhaox.github.io/2016/07/05/hashmap-vs-hashtable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HashMap 和 HashTable 到底哪不同？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://saeratom.com/tags/Android/"/>
    
      <category term="面试" scheme="http://saeratom.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JS判断CSS属性可用性</title>
    <link href="http://saeratom.com/2018/08/18/JS%E5%88%A4%E6%96%ADCSS%E5%B1%9E%E6%80%A7%E5%8F%AF%E7%94%A8%E6%80%A7/"/>
    <id>http://saeratom.com/2018/08/18/JS判断CSS属性可用性/</id>
    <published>2018-08-18T15:50:47.000Z</published>
    <updated>2018-08-28T07:19:24.052Z</updated>
    
    <content type="html"><![CDATA[<p>Web开发中，因为浏览器的不同，CSS的属性支持情况是有不同的。有时候需要判断CSS属性的支持情况做出不一样的设计，或者需要polyfill这个不支持的属性，这时候就需要判断CSS的支持情况。</p><a id="more"></a><p>DOM元素中我们可以通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style" target="_blank" rel="noopener"><em>DOM API</em></a> 获取样式声明对象 <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration" target="_blank" rel="noopener"><em>CSSStyleDeclaration</em></a>，获取的<a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration" target="_blank" rel="noopener"><em>CSSStyleDeclaration</em></a>为内联style的css设置属性。<a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration" target="_blank" rel="noopener"><em>CSSStyleDeclaration</em></a>有两个特点：</p><blockquote><ol><li>如果我们设置了一个不支持的CSS属性，则CSSStyleDeclaration中也不会出现这个变量名。</li><li>如果我们设置了一个支持的CSS属性，但是设置了一个不支持的值（如: sticky 定位），则CSSStyleDeclaration中对应的变量值还将保持为空值。</li></ol></blockquote><p>我们可以使用这两个特性来判断CSS属性的支持情况。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssSupport</span> (<span class="params">&#123;attr, value&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tempElement = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">if</span>(attr <span class="keyword">in</span> tempElement.style ) &#123;</span><br><span class="line">        tempElement.style[attr] = value</span><br><span class="line">        <span class="keyword">return</span> tempElement.style[attr] === value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web开发中，因为浏览器的不同，CSS的属性支持情况是有不同的。有时候需要判断CSS属性的支持情况做出不一样的设计，或者需要polyfill这个不支持的属性，这时候就需要判断CSS的支持情况。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://saeratom.com/tags/Web/"/>
    
      <category term="JavaScript" scheme="http://saeratom.com/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://saeratom.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Sticky Footer</title>
    <link href="http://saeratom.com/2018/07/29/Sticky-Footer/"/>
    <id>http://saeratom.com/2018/07/29/Sticky-Footer/</id>
    <published>2018-07-29T14:54:34.000Z</published>
    <updated>2018-08-28T07:18:03.863Z</updated>
    
    <content type="html"><![CDATA[<p>Sticky Footer 是一种网页效果：如果内容不够长时，页脚固定在浏览器底部；如果内容足够长，页脚固定在页面的最底部。</p><a id="more"></a><h2 id="1-使用absolute"><a href="#1-使用absolute" class="headerlink" title="1. 使用absolute"></a>1. 使用absolute</h2><p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-使用margin-bottom-负值"><a href="#2-使用margin-bottom-负值" class="headerlink" title="2. 使用margin-bottom 负值"></a>2. 使用margin-bottom 负值</h2><p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">        content</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"push"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Equal to height of footer */</span></span><br><span class="line">    <span class="comment">/* But also accounting for potential margin-bottom of last child */</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span>,</span><br><span class="line"><span class="selector-class">.push</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-使用calc"><a href="#3-使用calc" class="headerlink" title="3. 使用calc()"></a>3. 使用calc()</h2><p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="built_in">calc</span>(100vh - 50px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="tip"><br>假如content中的最后一个元素有 <em>margin-bottom</em> 属性，这将导致 <em>content</em> 的高增加，这是需要调整<em>calc(100vh - footerHeight - marginBottom)</em><br></div><h2 id="4-使用-flex-布局"><a href="#4-使用-flex-布局" class="headerlink" title="4. 使用 flex 布局"></a>4. 使用 flex 布局</h2><p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sticky Footer 是一种网页效果：如果内容不够长时，页脚固定在浏览器底部；如果内容足够长，页脚固定在页面的最底部。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://saeratom.com/tags/Web/"/>
    
      <category term="Footer" scheme="http://saeratom.com/tags/Footer/"/>
    
  </entry>
  
  <entry>
    <title>2017年计划</title>
    <link href="http://saeratom.com/2017/01/02/2017-plan/"/>
    <id>http://saeratom.com/2017/01/02/2017-plan/</id>
    <published>2017-01-02T14:30:09.000Z</published>
    <updated>2018-08-28T07:19:24.052Z</updated>
    
    <content type="html"><![CDATA[<p>2016已经过去。 </p><p>突然发现我已在舒适区过的越来越自在，回想这一年似乎发现什么都没有发生改变。</p><p>技术能力在原地踏步，妹子依然没有。我觉得有必要让自己离开舒适区，让自己提升一下。</p><p>先定一个小目标，2017会越来越好。</p><a id="more"></a><h1 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h1><h2 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h2><blockquote><ol><li>Effective Java</li><li>代码整洁之道</li><li>重构：改善既有代码的设计</li><li>Android源码设计模式解析与实战</li><li>深入理解计算机系统</li><li>图解TCP/IP</li></ol></blockquote><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><blockquote><ol><li>失控</li><li>科技想要什么</li><li>必然</li><li>1984</li><li>经济学通史</li><li>赌客信条——你不可不知的行为经济学</li><li>硅谷百年史——伟大的科技创新与创业历程</li></ol></blockquote><h1 id="其它目标"><a href="#其它目标" class="headerlink" title="其它目标"></a>其它目标</h1><blockquote><ol><li>每月2篇blog</li><li>去没去过的城市（上海，南京）</li><li>坐一次飞机</li><li>实现一个网络协议（<em>gfw.press</em> android）</li><li>看完一本全英文书（<em>50 Android Hacks</em> or <em>Python Cookbook</em>）</li><li>造两个轮子并维护（BannerLayout, ImageShare）</li><li>写一个Web页面(Introduce <em>Bannnerlayout</em> &amp; <em>ImageShare</em>)</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016已经过去。 &lt;/p&gt;
&lt;p&gt;突然发现我已在舒适区过的越来越自在，回想这一年似乎发现什么都没有发生改变。&lt;/p&gt;
&lt;p&gt;技术能力在原地踏步，妹子依然没有。我觉得有必要让自己离开舒适区，让自己提升一下。&lt;/p&gt;
&lt;p&gt;先定一个小目标，2017会越来越好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="plan" scheme="http://saeratom.com/tags/plan/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://saeratom.com/2016/10/31/hello-world/"/>
    <id>http://saeratom.com/2016/10/31/hello-world/</id>
    <published>2016-10-31T07:59:44.000Z</published>
    <updated>2016-11-01T05:39:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World!</p><p>感谢<a href="https://github.com" target="_blank" rel="noopener">Github</a>，<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>，<a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="noopener">pinggod</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello World!&lt;/p&gt;
&lt;p&gt;感谢&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt;，&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;，&lt;a href=&quot;https://github.com/pinggod/hexo-theme-apollo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pinggod&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://saeratom.com/tags/blog/"/>
    
  </entry>
  
</feed>
